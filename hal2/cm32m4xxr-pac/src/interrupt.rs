#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "1 - PVD through EXTI line detection interrupt"]
    PVD = 1,
    #[doc = "3 - RTC global interrupt"]
    RTC = 3,
    #[doc = "4 - FLASH interrupt"]
    FLASH = 4,
    #[doc = "5 - RCC interrupt"]
    RCC = 5,
    #[doc = "6 - EXTI0 interrupt"]
    EXTI0 = 6,
    #[doc = "7 - EXTI1 interrupt"]
    EXTI1 = 7,
    #[doc = "8 - EXTI2 interrupt"]
    EXTI2 = 8,
    #[doc = "9 - EXTI3 interrupt"]
    EXTI3 = 9,
    #[doc = "10 - EXTI4 interrupt"]
    EXTI4 = 10,
    #[doc = "11 - DMA1 channel1 interrupt"]
    DMA1_CHANNEL1 = 11,
    #[doc = "12 - DMA1 channel2 interrupt"]
    DMA1_CHANNEL2 = 12,
    #[doc = "13 - DMA1 channel3 interrupt"]
    DMA1_CHANNEL3 = 13,
    #[doc = "14 - DMA1 channel4 interrupt"]
    DMA1_CHANNEL4 = 14,
    #[doc = "15 - DMA1 channel5 interrupt"]
    DMA1_CHANNEL5 = 15,
    #[doc = "16 - DMA1 channel6 interrupt"]
    DMA1_CHANNEL6 = 16,
    #[doc = "17 - DMA1 channel7 interrupt"]
    DMA1_CHANNEL7 = 17,
    #[doc = "18 - ADC1/ADC2 global interrupt"]
    ADC1_2 = 18,
    #[doc = "19 - CAN1 TX interrupts"]
    CAN1_TX = 19,
    #[doc = "20 - CAN1 RX0 interrupts"]
    CAN1_RX0 = 20,
    #[doc = "21 - CAN1 RX1 interrupts"]
    CAN1_RX1 = 21,
    #[doc = "22 - CAN1 SCE interrupt"]
    CAN1_SCE = 22,
    #[doc = "23 - EXTI5/6/7/8/9 interrupt"]
    EXTI9_5 = 23,
    #[doc = "24 - TIM1 Break interrupt"]
    TIM1_BRK = 24,
    #[doc = "25 - TIM1 Update interrupt"]
    TIM1_UP = 25,
    #[doc = "26 - TIM1 Trigger and Commutation interrupts"]
    TIM1_TRG_COM = 26,
    #[doc = "27 - TIM1 Capture Compare interrupt"]
    TIM1_CC = 27,
    #[doc = "28 - TIM2 global interrupt"]
    TIM2 = 28,
    #[doc = "29 - TIM3 global interrupt"]
    TIM3 = 29,
    #[doc = "30 - TIM4 global interrupt"]
    TIM4 = 30,
    #[doc = "31 - I2C1 Event interrupt"]
    I2C1_EV = 31,
    #[doc = "32 - I2C1 Error interrupt"]
    I2C1_ER = 32,
    #[doc = "33 - I2C2 Event interrupt"]
    I2C2_EV = 33,
    #[doc = "34 - I2C2 Error interrupt"]
    I2C2_ER = 34,
    #[doc = "35 - SPI1 global interrupt"]
    SPI1 = 35,
    #[doc = "36 - SPI2 global interrupt"]
    SPI2 = 36,
    #[doc = "37 - USART1 global interrupt"]
    USART1 = 37,
    #[doc = "38 - USART2 global interrupt"]
    USART2 = 38,
    #[doc = "39 - USART3 global interrupt"]
    USART3 = 39,
    #[doc = "40 - EXTI10/11/12/13/14/15 interrupt"]
    EXTI15_10 = 40,
    #[doc = "41 - RTC Alarms through EXTI line interrupt"]
    RTCALARM = 41,
    #[doc = "43 - TIM8 Break interrupt"]
    TIM8_BRK = 43,
    #[doc = "44 - TIM8 Update interrupt"]
    TIM8_UP = 44,
    #[doc = "45 - TIM8 Trigger and Commutation interrupts"]
    TIM8_TRG_COM = 45,
    #[doc = "46 - TIM8 Capture Compare interrupt"]
    TIM8_CC = 46,
    #[doc = "47 - ADC3/ADC4 global interrupt"]
    ADC3_4 = 47,
    #[doc = "50 - TIM5 global interrupt"]
    TIM5 = 50,
    #[doc = "51 - SPI3 global interrupt"]
    SPI3 = 51,
    #[doc = "52 - UART4 global interrupt"]
    UART4 = 52,
    #[doc = "53 - UART5 global interrupt"]
    UART5 = 53,
    #[doc = "54 - TIM6 global interrupt"]
    TIM6 = 54,
    #[doc = "55 - TIM7 global interrupt"]
    TIM7 = 55,
    #[doc = "56 - DMA2 channel1 interrupt"]
    DMA2_CHANNEL1 = 56,
    #[doc = "57 - DMA2 channel2 interrupt"]
    DMA2_CHANNEL2 = 57,
    #[doc = "58 - DMA2 channel3 interrupt"]
    DMA2_CHANNEL3 = 58,
    #[doc = "59 - DMA2 channel4 interrupt"]
    DMA2_CHANNEL4 = 59,
    #[doc = "60 - DMA2 channel5 interrupt"]
    DMA2_CHANNEL5 = 60,
    #[doc = "63 - CAN2 TX interrupts"]
    CAN2_TX = 63,
    #[doc = "64 - CAN2 RX0 interrupts"]
    CAN2_RX0 = 64,
    #[doc = "65 - CAN2 RX1 interrupts"]
    CAN2_RX1 = 65,
    #[doc = "66 - CAN2 SCE interrupt"]
    CAN2_SCE = 66,
    #[doc = "67 - QSPI global interrupt"]
    QSPI = 67,
    #[doc = "68 - DMA2 channel6 interrupt"]
    DMA2_CHANNEL6 = 68,
    #[doc = "69 - DMA2 channel7 interrupt"]
    DMA2_CHANNEL7 = 69,
    #[doc = "70 - I2C3 Event interrupt"]
    I2C3_EV = 70,
    #[doc = "71 - I2C3 Error interrupt"]
    I2C3_ER = 71,
    #[doc = "72 - I2C4 Event interrupt"]
    I2C4_EV = 72,
    #[doc = "73 - I2C4 Error interrupt"]
    I2C4_ER = 73,
    #[doc = "74 - UART6 global interrupt"]
    UART6 = 74,
    #[doc = "75 - UART7 global interrupt"]
    UART7 = 75,
    #[doc = "76 - DMA1 channel8 interrupt"]
    DMA1_CHANNEL8 = 76,
    #[doc = "77 - DMA2 channel8 interrupt"]
    DMA2_CHANNEL8 = 77,
    #[doc = "81 - TSC global interrupt"]
    TSC = 81,
    #[doc = "82 - COMP1/2/3 interrupt"]
    COMP_1_2_3 = 82,
    #[doc = "83 - COMP4/5/6 interrupt"]
    COMP_4_5_6 = 83,
    #[doc = "84 - COMP7 interrupt"]
    COMP7 = 84,
}
#[doc = r" TryFromInterruptError"]
#[derive(Debug, Copy, Clone)]
pub struct TryFromInterruptError(());
impl Interrupt {
    #[doc = r" Attempt to convert a given value into an `Interrupt`"]
    #[inline]
    pub fn try_from(value: u8) -> Result<Self, TryFromInterruptError> {
        match value {
            1 => Ok(Interrupt::PVD),
            3 => Ok(Interrupt::RTC),
            4 => Ok(Interrupt::FLASH),
            5 => Ok(Interrupt::RCC),
            6 => Ok(Interrupt::EXTI0),
            7 => Ok(Interrupt::EXTI1),
            8 => Ok(Interrupt::EXTI2),
            9 => Ok(Interrupt::EXTI3),
            10 => Ok(Interrupt::EXTI4),
            11 => Ok(Interrupt::DMA1_CHANNEL1),
            12 => Ok(Interrupt::DMA1_CHANNEL2),
            13 => Ok(Interrupt::DMA1_CHANNEL3),
            14 => Ok(Interrupt::DMA1_CHANNEL4),
            15 => Ok(Interrupt::DMA1_CHANNEL5),
            16 => Ok(Interrupt::DMA1_CHANNEL6),
            17 => Ok(Interrupt::DMA1_CHANNEL7),
            18 => Ok(Interrupt::ADC1_2),
            19 => Ok(Interrupt::CAN1_TX),
            20 => Ok(Interrupt::CAN1_RX0),
            21 => Ok(Interrupt::CAN1_RX1),
            22 => Ok(Interrupt::CAN1_SCE),
            23 => Ok(Interrupt::EXTI9_5),
            24 => Ok(Interrupt::TIM1_BRK),
            25 => Ok(Interrupt::TIM1_UP),
            26 => Ok(Interrupt::TIM1_TRG_COM),
            27 => Ok(Interrupt::TIM1_CC),
            28 => Ok(Interrupt::TIM2),
            29 => Ok(Interrupt::TIM3),
            30 => Ok(Interrupt::TIM4),
            31 => Ok(Interrupt::I2C1_EV),
            32 => Ok(Interrupt::I2C1_ER),
            33 => Ok(Interrupt::I2C2_EV),
            34 => Ok(Interrupt::I2C2_ER),
            35 => Ok(Interrupt::SPI1),
            36 => Ok(Interrupt::SPI2),
            37 => Ok(Interrupt::USART1),
            38 => Ok(Interrupt::USART2),
            39 => Ok(Interrupt::USART3),
            40 => Ok(Interrupt::EXTI15_10),
            41 => Ok(Interrupt::RTCALARM),
            43 => Ok(Interrupt::TIM8_BRK),
            44 => Ok(Interrupt::TIM8_UP),
            45 => Ok(Interrupt::TIM8_TRG_COM),
            46 => Ok(Interrupt::TIM8_CC),
            47 => Ok(Interrupt::ADC3_4),
            50 => Ok(Interrupt::TIM5),
            51 => Ok(Interrupt::SPI3),
            52 => Ok(Interrupt::UART4),
            53 => Ok(Interrupt::UART5),
            54 => Ok(Interrupt::TIM6),
            55 => Ok(Interrupt::TIM7),
            56 => Ok(Interrupt::DMA2_CHANNEL1),
            57 => Ok(Interrupt::DMA2_CHANNEL2),
            58 => Ok(Interrupt::DMA2_CHANNEL3),
            59 => Ok(Interrupt::DMA2_CHANNEL4),
            60 => Ok(Interrupt::DMA2_CHANNEL5),
            63 => Ok(Interrupt::CAN2_TX),
            64 => Ok(Interrupt::CAN2_RX0),
            65 => Ok(Interrupt::CAN2_RX1),
            66 => Ok(Interrupt::CAN2_SCE),
            67 => Ok(Interrupt::QSPI),
            68 => Ok(Interrupt::DMA2_CHANNEL6),
            69 => Ok(Interrupt::DMA2_CHANNEL7),
            70 => Ok(Interrupt::I2C3_EV),
            71 => Ok(Interrupt::I2C3_ER),
            72 => Ok(Interrupt::I2C4_EV),
            73 => Ok(Interrupt::I2C4_ER),
            74 => Ok(Interrupt::UART6),
            75 => Ok(Interrupt::UART7),
            76 => Ok(Interrupt::DMA1_CHANNEL8),
            77 => Ok(Interrupt::DMA2_CHANNEL8),
            81 => Ok(Interrupt::TSC),
            82 => Ok(Interrupt::COMP_1_2_3),
            83 => Ok(Interrupt::COMP_4_5_6),
            84 => Ok(Interrupt::COMP7),
            _ => Err(TryFromInterruptError(())),
        }
    }
}
#[cfg(feature = "rt")]
#[macro_export]
#[doc = r" Assigns a handler to an interrupt"]
#[doc = r""]
#[doc = r" This macro takes two arguments: the name of an interrupt and the path to the"]
#[doc = r" function that will be used as the handler of that interrupt. That function"]
#[doc = r" must have signature `fn()`."]
#[doc = r""]
#[doc = r" Optionally, a third argument may be used to declare interrupt local data."]
#[doc = r" The handler will have exclusive access to these *local* variables on each"]
#[doc = r" invocation. If the third argument is used then the signature of the handler"]
#[doc = r" function must be `fn(&mut $NAME::Locals)` where `$NAME` is the first argument"]
#[doc = r" passed to the macro."]
#[doc = r""]
#[doc = r" # Example"]
#[doc = r""]
#[doc = r" ``` ignore"]
#[doc = r" interrupt!(TIM2, periodic);"]
#[doc = r""]
#[doc = r" fn periodic() {"]
#[doc = r#"     print!(".");"#]
#[doc = r" }"]
#[doc = r""]
#[doc = r" interrupt!(TIM3, tick, locals: {"]
#[doc = r"     tick: bool = false;"]
#[doc = r" });"]
#[doc = r""]
#[doc = r" fn tick(locals: &mut TIM3::Locals) {"]
#[doc = r"     locals.tick = !locals.tick;"]
#[doc = r""]
#[doc = r"     if locals.tick {"]
#[doc = r#"         println!("Tick");"#]
#[doc = r"     } else {"]
#[doc = r#"         println!("Tock");"#]
#[doc = r"     }"]
#[doc = r" }"]
#[doc = r" ```"]
macro_rules ! interrupt { ( $ NAME : ident , $ path : path , locals : { $ ( $ lvar : ident : $ lty : ty = $ lval : expr ; ) * } ) => { # [ allow ( non_snake_case ) ] mod $ NAME { pub struct Locals { $ ( pub $ lvar : $ lty , ) * } } # [ allow ( non_snake_case ) ] # [ no_mangle ] pub extern "C" fn $ NAME ( ) { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; static mut LOCALS : self :: $ NAME :: Locals = self :: $ NAME :: Locals { $ ( $ lvar : $ lval , ) * } ; let f : fn ( & mut self :: $ NAME :: Locals ) = $ path ; f ( unsafe { & mut LOCALS } ) ; } } ; ( $ NAME : ident , $ path : path ) => { # [ allow ( non_snake_case ) ] # [ no_mangle ] pub extern "C" fn $ NAME ( ) { let _ = $ crate :: interrupt :: Interrupt :: $ NAME ; let f : fn ( ) = $ path ; f ( ) ; } } }
